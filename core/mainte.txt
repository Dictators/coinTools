/*
 * @Description:
 * @Author: maxyang
 * @Date: 2022-01-06 12:11:27
 * @LastEditTime: 2022-01-06 12:11:28
 * @LastEditors: liutq
 * @Reference:
 */

privateKey, err := crypto.HexToECDSA("1f8b4613c9ed6c73102ac6dabbae8dd17f70991a788675fe5b7cb13d5912554e")
if err != nil {
	log.Fatal(err)
}

publicKey := privateKey.Public()
publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
if !ok {
	log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")
}

fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
nonce, err := Eclient.C.PendingNonceAt(context.Background(), fromAddress)
if err != nil {
	log.Fatal(err)
}

gasLimit := uint64(21000)
gasPrice, err := Eclient.C.SuggestGasPrice(context.Background())
if err != nil {
	log.Fatal(err)
}

gasCost := CalcGasCost(gasLimit, gasPrice)
fmt.Println("gasCost", gasCost)
value := balance.Sub(balance, gasCost)
fmt.Println("value", value)

toAddress := common.HexToAddress("0x54F38855ba71d4Cef80203F012F32AB488BE187F")
var data []byte
tx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)

chainID, err := Eclient.C.NetworkID(context.Background())

if err != nil {
	log.Fatal(err)
}

signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)
if err != nil {
	log.Fatal(err)
}

err = Eclient.C.SendTransaction(context.Background(), signedTx)
if err != nil {
	log.Fatal(err)
}

fmt.Printf("tx sent: %s", signedTx.Hash().Hex())
